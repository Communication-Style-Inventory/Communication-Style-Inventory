{"version":3,"sources":["components/Question.js","components/Questions.js","components/About.js","components/Results.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Question","makeStyles","theme","root","display","margin","spacing","FormControl","component","FormLabel","this","props","number","RadioGroup","aria-label","name","onChange","event","clicked","target","value","FormControlLabel","control","Radio","label","A","onClick","B","React","Component","Questions","communicationStyleData","useState","answers","setAnswers","setName","questions","Object","keys","sort","a","b","Number","map","questionNumber","ListItem","key","divider","selectedAnswer","newSelection","previouAnswers","Paper","elevation","Card","variant","CardContent","Typography","TextField","id","updateName","List","Button","color","length","alert","results","objJsonStr","JSON","stringify","objJsonB64","btoa","window","location","process","About","TakeTheQuizSection","Link","href","ResultOutput","bulletList","resultInfo","bullets","bullet","index","type","Results","search","dataJSON","data","parse","atob","err","console","log","validatedData","URLSearchParams","get","keyCount","getCount","count","resType","join","expectedAnswers","groupResults","question","resultInfos","Layout","Navbar","bg","Brand","Nav","className","children","fixed","FacebookShareButton","url","FacebookIcon","size","round","LinkedinShareButton","LinkedinIcon","TwitterShareButton","TwitterIcon","TelegramShareButton","TelegramIcon","WhatsappShareButton","WhatsappIcon","PinterestShareButton","PinterestIcon","VKShareButton","VKIcon","OKShareButton","OKIcon","RedditShareButton","RedditIcon","TumblrShareButton","TumblrIcon","LivejournalShareButton","LivejournalIcon","MailruShareButton","MailruIcon","ViberShareButton","ViberIcon","WorkplaceShareButton","WorkplaceIcon","EmailShareButton","EmailIcon","App","basename","path","exact","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2443a39.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel\r\n} from '@material-ui/core';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nclass Question extends React.Component {\r\n    render() {\r\n        return (\r\n            <FormControl /*className={this.props.classes.root}*/ component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Question# {this.props.number}</FormLabel>\r\n                <RadioGroup aria-label=\"option\" name=\"customized-radios\" onChange={(event) => this.props.clicked(event.target.value)}>\r\n                    <FormControlLabel value=\"A\" control={<Radio />} label={this.props.A}/>\r\n                    <FormControlLabel value=\"B\" control={<Radio onClick={() => this.props.clicked(\"B\")}/>} label={this.props.B}/>\r\n                </RadioGroup>\r\n            </FormControl>\r\n        )\r\n    }\r\n}\r\n// export default withStyles(useStyles)(Question);\r\nexport default Question;","import React from 'react';\r\nimport {\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Paper,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport Question from \"./Question\"\r\n\r\nfunction Questions({communicationStyleData}) {\r\n  const [answers, setAnswers] = React.useState({});\r\n  const [name, setName] = React.useState(\"Unknown\");\r\n  let questions = Object.keys(communicationStyleData.questions)\r\n  .sort((a, b) => Number(a) - Number(b))\r\n  .map(questionNumber => {\r\n    return (\r\n      <ListItem key={questionNumber} divider>\r\n        <Question\r\n          number={questionNumber} \r\n          A={communicationStyleData.questions[questionNumber].A} \r\n          B={communicationStyleData.questions[questionNumber].B}\r\n          clicked={setSelectedOption(questionNumber)}/>\r\n      </ListItem>\r\n    )\r\n  })\r\n\r\n  function setSelectedOption(number){\r\n    return function(selectedAnswer){\r\n      let newSelection = {}\r\n      newSelection[number] = selectedAnswer;\r\n      setAnswers(previouAnswers => ({ ...previouAnswers, ...newSelection}))\r\n    }\r\n  }\r\n\r\n  function updateName(name){\r\n    setName(name)\r\n  }\r\n\r\n  return (\r\n    <Paper elevation={3}>\r\n        <Card variant=\"outlined\">\r\n            <CardContent>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                This is an informal survey, designed to \r\n        determine how you usually act in everyday \r\n        related situations.  The idea is to get a \r\n        clear description of how you see yourself.  \r\n        On the answer sheet, circle A or B in ea\r\n        ch pair of statements below, which shows \r\n        the one that MOST, describes you.\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n\r\n        <Card variant=\"outlined\">\r\n            <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                Name\r\n                </Typography>\r\n                <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" onChange={(event) => updateName(event.target.value)} />\r\n            </CardContent>\r\n        </Card>\r\n\r\n        <Card variant=\"outlined\">\r\n        <CardContent>\r\n        <List>\r\n            {questions}\r\n        </List>\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n                if(Object.keys(answers).length < Object.keys(communicationStyleData).length){\r\n                    alert(\"Please complete all questions!\")\r\n                }\r\n                else {\r\n                    let results = {answers, name: name}\r\n                    let objJsonStr = JSON.stringify(results);\r\n                    let objJsonB64 = btoa(objJsonStr);\r\n                    //alert(objJsonB64)\r\n                    window.location = `${process.env.PUBLIC_URL}/results?data=${objJsonB64}`\r\n                }\r\n            }\r\n            }\r\n        >\r\n            Submit\r\n        </Button>\r\n        </CardContent>\r\n        </Card>\r\n\r\n        {/* TODO: Remove then when you have a fix */}\r\n        <Card variant=\"outlined\">\r\n        <CardContent>\r\n        \r\n        </CardContent>\r\n        </Card>\r\n        \r\n        \r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Questions;\r\n","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Paper\r\n} from '@material-ui/core';\r\n\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return (\r\n          <Paper elevation={3}>\r\n            <Card variant=\"outlined\">\r\n                <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                About\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                Survey taken from The Platinum Rule by Tony Alessandra, Ph.D, & Michael J. O’Connor Ph.D. New York, New York, Warner Brooks 1996\r\n                </Typography>\r\n                </CardContent>\r\n            </Card>\r\n          </Paper>\r\n        )\r\n    }\r\n}\r\nexport default About;","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Paper,\r\n  ListItem,\r\n  List,\r\n  Link\r\n} from '@material-ui/core';\r\n\r\nfunction TakeTheQuizSection(props) {\r\n\r\n  return (\r\n    <Card variant=\"outlined\">\r\n        <CardContent>\r\n        <Link\r\n          variant=\"body3\"\r\n          href={`${process.env.PUBLIC_URL}/questions`}\r\n        >\r\n          Take the Quiz\r\n        </Link>\r\n        </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nfunction ResultOutput(props) {\r\n  let bulletList  = props.resultInfo.bullets.map((bullet, index) => {\r\n    return (\r\n      <ListItem key={index} divider>\r\n        {bullet}\r\n      </ListItem>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <Card variant=\"outlined\">\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\">\r\n          {`${props.resultInfo.type}`}\r\n          </Typography>\r\n          <List>\r\n            {bulletList}\r\n          </List>\r\n          \r\n        </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nfunction Results({communicationStyleData}) {\r\n\r\n  let search = window.location.search;\r\n  let params = new URLSearchParams(search);\r\n  let data = params.get('data');\r\n\r\n  let dataJSON = validatedData(data)\r\n  let keyCount = [\r\n    {\"key\": \"O\", \"count\": getCount(\"O\", dataJSON.answers)},\r\n    {\"key\": \"G\", \"count\": getCount(\"G\", dataJSON.answers)},\r\n    {\"key\": \"D\", \"count\": getCount(\"D\", dataJSON.answers)},\r\n    {\"key\": \"I\", \"count\": getCount(\"I\", dataJSON.answers)}\r\n  ].sort((a, b) => b.count - a.count)\r\n\r\n  let resType = [keyCount[0].key, keyCount[1].key].sort().join(\"\")\r\n\r\n  function validatedData(data){\r\n    let dataJSON = {}\r\n    try {\r\n      dataJSON = JSON.parse(atob(data))\r\n    } catch(err){\r\n      console.log(err)\r\n    }\r\n\r\n    return dataJSON\r\n  }\r\n\r\n  function getCount(key, answers) {\r\n    let count = 0;\r\n    let expectedAnswers = communicationStyleData.groupResults[key]\r\n    for(let question in expectedAnswers){\r\n      if(expectedAnswers[question] === answers[question]){\r\n        count++;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  console.log(communicationStyleData.resultInfos)\r\n  console.log(resType)\r\n  console.log(communicationStyleData.resultInfos[resType])\r\n\r\n  return (\r\n    <Paper elevation={3}>\r\n        <TakeTheQuizSection />\r\n        <Card variant=\"outlined\">\r\n            <CardContent>\r\n            <Typography variant=\"h4\" component=\"h2\">\r\n              {`Results for: ${dataJSON.name || \"Unknown\"}`}\r\n            </Typography>\r\n            </CardContent>\r\n        </Card>\r\n        <ResultOutput resultInfo={communicationStyleData.resultInfos[resType]}/>\r\n        {/* <Card variant=\"outlined\">\r\n            <CardContent>\r\n            <Typography color=\"textSecondary\">\r\n            {`${JSON.stringify(keyCount)}`}\r\n            </Typography>\r\n            </CardContent>\r\n        </Card> */}\r\n        <TakeTheQuizSection />\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React from 'react';\r\nimport {\r\n    Navbar,\r\n    Nav\r\n} from 'react-bootstrap';\r\nimport {\r\n  FacebookShareButton,\r\n  LinkedinShareButton,\r\n  TwitterShareButton,\r\n  TelegramShareButton,\r\n  WhatsappShareButton,\r\n  PinterestShareButton,\r\n  VKShareButton,\r\n  OKShareButton,\r\n  RedditShareButton,\r\n  TumblrShareButton,\r\n  LivejournalShareButton,\r\n  MailruShareButton,\r\n  ViberShareButton,\r\n  WorkplaceShareButton,\r\n  EmailShareButton,\r\n} from 'react-share';\r\n\r\nimport {\r\n  FacebookIcon,\r\n  TwitterIcon,\r\n  TelegramIcon,\r\n  WhatsappIcon,\r\n  LinkedinIcon,\r\n  PinterestIcon,\r\n  VKIcon,\r\n  OKIcon,\r\n  RedditIcon,\r\n  TumblrIcon,\r\n  LivejournalIcon,\r\n  MailruIcon,\r\n  ViberIcon,\r\n  WorkplaceIcon,\r\n  EmailIcon,\r\n} from 'react-share';\r\n\r\nconst Layout = props => (\r\n    <div >\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href={process.env.PUBLIC_URL+\"/\"}>COMMUNICATIONS STYLE INVENTORY</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                {/* <Nav.Link href={\"/\"}>Home</Nav.Link>\r\n                <Nav.Link href={\"/about\"}>About</Nav.Link>\r\n                <Nav.Link href={\"/questions\"}>Questions</Nav.Link> */}\r\n                <Nav.Link href={process.env.PUBLIC_URL+\"/\"}>Home</Nav.Link>\r\n                <Nav.Link href={process.env.PUBLIC_URL+\"/about\"}>About</Nav.Link>\r\n                <Nav.Link href={process.env.PUBLIC_URL+\"/questions\"}>Questions</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n        {props.children}\r\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"bottom\">\r\n          <FacebookShareButton url={window.location}>\r\n            <FacebookIcon size={32} round={true} />\r\n          </FacebookShareButton>\r\n\r\n          <LinkedinShareButton url={window.location} >\r\n            <LinkedinIcon size={32} round={true} />\r\n          </LinkedinShareButton>\r\n\r\n          <TwitterShareButton url={window.location} > \r\n            <TwitterIcon size={32} round={true} />\r\n          </TwitterShareButton>\r\n\r\n          <TelegramShareButton url={window.location} > \r\n            <TelegramIcon size={32} round={true} />\r\n          </TelegramShareButton>\r\n\r\n          <WhatsappShareButton url={window.location} >  \r\n            <WhatsappIcon size={32} round={true} />\r\n          </WhatsappShareButton>\r\n\r\n          <PinterestShareButton url={window.location} >  \r\n            <PinterestIcon size={32} round={true} />\r\n          </PinterestShareButton>\r\n\r\n          <VKShareButton url={window.location} >  \r\n            <VKIcon size={32} round={true} />\r\n          </VKShareButton>\r\n\r\n          <OKShareButton url={window.location} >  \r\n            <OKIcon size={32} round={true} />\r\n          </OKShareButton>\r\n\r\n          <RedditShareButton url={window.location} >  \r\n            <RedditIcon size={32} round={true} />\r\n          </RedditShareButton>\r\n\r\n          <TumblrShareButton url={window.location} >  \r\n            <TumblrIcon size={32} round={true} />\r\n          </TumblrShareButton>\r\n\r\n          <LivejournalShareButton url={window.location} >  \r\n            <LivejournalIcon size={32} round={true} />\r\n          </LivejournalShareButton>\r\n\r\n          <MailruShareButton url={window.location} >  \r\n            <MailruIcon size={32} round={true} />\r\n          </MailruShareButton>\r\n\r\n          <ViberShareButton url={window.location} >  \r\n            <ViberIcon size={32} round={true} />\r\n          </ViberShareButton>\r\n\r\n          <WorkplaceShareButton url={window.location} >  \r\n            <WorkplaceIcon size={32} round={true} />\r\n          </WorkplaceShareButton>\r\n\r\n          <EmailShareButton url={window.location} >  \r\n            <EmailIcon size={32} round={true} />\r\n          </EmailShareButton>\r\n        </Navbar>\r\n    </div>\r\n  );\r\n  \r\nexport default Layout;\r\n  ","import React from 'react';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\nimport Questions from \"./components/Questions\"\nimport About from \"./components/About\"\nimport Results from \"./components/Results\"\nimport Layout from \"./components/Layout\"\nimport communicationStyleData from \"./communication-style-data.json\"\n\nfunction App() {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL || ''}>\n      <Layout/>\n      <Route path={\"/\"} exact render={(props) => <Questions {...props} communicationStyleData={communicationStyleData} />} />\n      <Route path={\"/about\"} render={(props) => <About />} />\n      <Route path={\"/questions\"} render={(props) => <Questions {...props} communicationStyleData={communicationStyleData} />} />\n      <Route path={\"/results\"} render={(props) => <Results {...props} communicationStyleData={communicationStyleData} />} />\n      {/* <Route path={process.env.PUBLIC_URL+\"/\"} exact render={(props) => <Questions {...props} communicationStyleData={communicationStyleData} />} />\n      <Route path={process.env.PUBLIC_URL+\"/about\"} exact render={(props) => <About {...props} communicationStyleData={communicationStyleData} />} />\n      <Route path={process.env.PUBLIC_URL+\"/questions\"} render={(props) => <Questions {...props} communicationStyleData={communicationStyleData} />} />\n      <Route path={process.env.PUBLIC_URL+\"/results\"} render={(props) => <Results {...props} communicationStyleData={communicationStyleData} />} /> */}\n      {/* <Route path={\"/Communication-Style-Inventory/\"} exact render={(props) => <Questions {...props} communicationStyleData={communicationStyleData} />} />\n      <Route path={\"/Communication-Style-Inventory/about\"} exact render={(props) => <About {...props} communicationStyleData={communicationStyleData} />} />\n      <Route path={\"/Communication-Style-Inventory/questions\"} render={(props) => <Questions {...props} communicationStyleData={communicationStyleData} />} />\n      <Route path={\"/Communication-Style-Inventory/results\"} render={(props) => <Results {...props} communicationStyleData={communicationStyleData} />} /> */}\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}